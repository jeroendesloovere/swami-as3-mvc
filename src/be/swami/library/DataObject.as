/** * DataObject package * * @author Jeroen Desloovere <info@jeroendesloovere.be> */package be.swami.library{	/**	 * Object class	 */	public class DataObject extends Object	{		private var data:Object = new Object();		/**		 * Object constructor		 */		public function DataObject(){}		/**		 * Count		 *		 * @param string[optional] key 	The key you have given for the value.		 * @return int		 */		public function count(key:String = '')		{						// @todo: return the count		}		/**		 * Get value for key		 *		 * @param string key 					The key you have given for the value.		 * @param mixed[optional] defaultValue 	The default value to return when value not exists.		 * @return mixed		 */		public function get(key:String, defaultValue = null)		{			// value not exists			if(this.data.key === undefined)			{				// add new value and return it				return set(key, defaultValue);			}			// return founded value			else return this.data.key;		}		/**		 * Set value for key		 *		 * @param string key	The key you have given for the value.		 * @param mixed value 	The default value to return when value not exists.		 * @return mixed		 */		public function set(key:String, value)		{			// module not already set			if(this.data.key === undefined)			{				// add module as new object				this.data.key = new Object();			}			// set value for module object and return it			return this.data.key = value;		}		/**		 * Unset value for key		 *		 * @param string key 	The key you have given for the value.		 */		public function unset(key:String)		{			// unset key			if(this.data.key !== undefined) this.data.key = null;		}	}}		