/** * Navigation package * * @author Jeroen Desloovere <info@jeroendesloovere.be> */package be.swami.core{	/**	 * Swami imports	 */	import be.swami.library.Filter;	/**	 * Other imports	 */	import flash.net.navigateToURL;	import flash.net.URLRequest;	/**	 * Navigation class	 */	public class Navigation extends Model	{		// init variables		private var currentPageId:int;		private var pages:Array;		/**		 * Navigation constructor		 */		public function Navigation(){}		/**		 * add page		 *		 * @param array page		 */		public function add(page:Array)		{			this.pages[page['id']] = page;		}		/**		 * Get page		 *		 * @param int $pageId		 */		public function get(pageId:int)		{			return this.pages[pageId];		}		/**		 * Get title for page		 *		 * @param int[optional] $pageId		 * @return string		 */		public function getTitle(pageId:int = 0)		{			// redefine pageId			if(pageId == 0) pageId = this.currentPageId;			// return title			return (this.pages[pageId]) ? this.pages[pageId]['title'] : '';		}		/**		 * Get description for page		 *		 * @param int[optional] $pageId		 * @return string		 */		public function getDescription(pageId:int = 0)		{			// redefine pageId			if(pageId == 0) pageId = this.currentPageId;			// return description			return (this.pages[pageId]) ? this.pages[pageId]['description'] : '';		}		/**		 * Go to (external) link		 *		 * @param mixed url The url you want to go to, can also be internal		 */		public function goto(value)		{			// check for page id			if(Filter.isInteger(value))			{				// @todo				trace('show page');			}			// external link found, contains http:// or https://			else if(Filter.isWebsite(value))			{				// request url				var request:URLRequest = new URLRequest(value);				// navigate to url in blank frame				navigateToURL(request, '_blank');			}trace('ier');			// check for page url			// @todo		}		/**		 * Set view		 *		 * @param		 */		public function setView(value, view:View)		{					}	}}